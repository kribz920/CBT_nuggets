def validate_path(expected_path, character_path):
    correct_count = 0
    character_name = character_path[0]

    for i in range(len(expected_path)):
        if expected_path[i] == character_path[i + 1]:
            correct_count += 1

    accuracy_percentage = correct_count / len(expected_path) * 100
    return character_name, accuracy_percentage



# dubble character
def double_string(string):
    # double = ""
    # for char in string:
    #     double = 
        



    output = ""
    for i in string:
        output = output + i*2
    return output    


    ===========================
    dict met key value pairs

    def get_character_record(name, server, level, rank):

    record = {
        'name'    : name,
        'server'  : server,
        'level'   : level,
        'rank'    : rank,
        'ID'      : f'{name}#{server}'
    }
    

    
    return record


======================================

als je iets een set maakt
verwijder je alle duplicates

ze zijn unorded 
dus als je er over heen iterat krijg je niet altijd het zelfde


set zit in memory en vind alles sneller
en er zitten geen dubble in een set

nu_EEN_Set = set(list_naam)

empty_set = set{} //anders wordt het dict

my_set.add('iteml')

for item in my_set:
    print(f"Current item: {itme}")


=============================
duplicates weg halen en vershil in sets laten zitten

def find_missing_ids(first_ids, second_ids):
    s1 = set(first_ids)
    s2 = set(second_ids)
    return list(s1 - s2)

mijn code was ook goed
def find_missing_ids(first_ids, second_ids):
    new_first_ids = set(first_ids)
    missing = []

    for i in new_first_ids:
        if i not in second_ids:
            missing.append(i)
    
    
    return missing
=====================================================def main():
    try:
        
        print(get_player_record(1))
        print(get_player_record(2))
        print(get_player_record(3))
        print(get_player_record(4))
    except Exception as e:
        print(f"{e}")
        
    


# Don't edit below this line


def get_player_record(player_id):
    if player_id == 1:
        return {"name": "Slayer", "level": 128}
    if player_id == 2:
        return {"name": "Dorgoth", "level": 300}
    if player_id == 3:
        return {"name": "Saruman", "level": 4000}
    raise Exception("player id not found")


main()
===============================

def get_player_record(player_id):
    if player_id == 1:
        return {"name": "Slayer", "level": 128}
    if player_id == 2:
        return {"name": "Dorgoth", "level": 300}
    if player_id == 3:
        return {"name": "Saruman", "level": 4000}
    raise Exception("player id not found")


===============================
Assignment
Complete the purchase_item function. If the character doesn't have enough gold raise an exception with the text not enough gold. Don't handle the exception.

Otherwise, return the amount of money the customer has leftover after completing the purchase.




def purchase_item(price, gold_available):
    if gold_available < price:
        raise Exception("not enough gold")
    return gold_available - price

    =============================

Here's a breakdown of how it works in a loop:

Initialize sum: We start by setting sum = 0. This is our accumulator, where we'll store the running total.

Loop through numbers: We use a for loop for i in range(1, n + 1): to iterate through each number from 1 to n. The loop will control the flow of adding each number to our total.

Accumulate Sum: Inside the loop, we use sum += i. This is a shorthand for sum = sum + i, which means we get the current value of sum and add i to it. Then we update sum with this new total.

Return sum: After the loop finishes, our sum variable contains the total of all numbers from 1 through n, and we return it as the result.

Does this help you understand how the sum is calculated?

def number_sum(n):
    sum = 0
    for i in range(1, n +1):
        sum += i
    return sum

    ==============

def find_min(nums):
    min = float("inf")
    for num in nums:
        if num < min:
            min = num
    return min

min vinden uit de lijst
========================
typ filter

def remove_nonints(nums):
    non_list = []
    for num in nums:
        if type(num) == int:
            non_list.append(num)
    return non_list
            
=====================
factorial

def factorial(num):
    result = 1
    for i in range(1, num + 1):
        result *= i
    return result