Introduction

You're probably very excited to start writing some Python scripts or Ansible playbooks and dive into the expansive world of automation. 
It's hard not to be excited!
Despite that, you'll want to hold your horses for just a second (trust me, you'll get into the development fun sooner rather than later!). 
he best way to ensure that we are ready to begin developing is to prepare a working development environment, complete with all the tools we'll need. 
Just like how a homebuilder isn't going to begin building a foundation without their hammer, we need to make sure all our tools are ready!

step zero setup all your tools
=====================================================

While you're likely tempted to download all the development tools you'll need directly to your actual workstation, 
there is a better solution—running a dedicated Linux-based development environment that is separate from your actual workstation. 
This gives us the best of both worlds. We can develop on Linux and take advantage of its
developer-friendly architecture and rich package support without disrupting our regular OS (e.g., Windows).

We have two main options for deploying a Linux machine to run our development environment:

    Running Linux in a VM
    Running the Windows Subsystem for Linux (WSL 2)

Let's talk about what we need to do to deploy Linux using either option!

Before we begin, make sure virtualization is enabled on your system! Consult your motherboard/system's documentation for more details.

1 wat OS 
2 wat os should we use
    linux easy 
    compatibility (dev env)

options for deploying linux
    single linux install
    dual but win/linux
    vm with linux
    WLS 2



Linux makes for a great development platform due to the abundance of development-centric packages. True or false?
True

=========================================================================

Deploying Ubuntu Linux in a VM

Let's dive into deploying Ubuntu Desktop in a virtual machine using VMware Workstation!

1 downlaod ubuntu Desktop, server versie heeft geen GUI

vm-tools maak bv je resoltie in orde

What command did we use to install VMware Tools on the Ubuntu VM?
sudo apt install open-vm-tools

wat makkelijker is WSL
in admin terminal

wsl --install


PS C:\windows\system32> wsl --install
Installing: Virtual Machine Platform
Virtual Machine Platform has been installed.
Installing: Windows Subsystem for Linux
Windows Subsystem for Linux has been installed.
Installing: Windows Subsystem for Linux
[==========================62,0%====                       ]



reboot 
install daarna:
sudo apt update
sudo apt upgrade -y

daarna ansible 
sudo add-apt-repository ppa:ansible/ansible
sudo apt install wget software-properties-common apt-transport-https
sudo apt install ansible -y

powershell 
sudo apt install powershell
sudo apt install wget software-properties-common apt-transport-https

docker 

en voor Vs Code de wsl extention
na installatie herstart en verder met installatie met app wsl
ubuntu wordt nu verder gedraaid

Ubuntu is al geïnstalleerd.
Ubuntu starten...
Installing, this may take a few minutes...
Please create a default UNIX user account. The username does not need to match your Windows username.
For more information visit: https://aka.ms/wslusers
Enter new UNIX username:

Which of the following commands is used to install all necessary WSL2 services and use Ubuntu as the default distro?

wsl --install

===========================================

Configuring Python

While our Linux distribution comes with Python pre-installed, we'll need to expand it with various libraries 
(bundles of pre-created code designed to augment the base programming language with additional features) 
in order to give it the tools we'll need for network automation!

We'll focus on creating a virtual environment (venv) in Python and using pip, Python's built-in package manager
(similar to npm in the Node.js world, if you are familiar with that), to install the following packages/libraries:

    ncclient - interacting with NETCONF
    requests - interacting with REST APIs (e.g., RESTCONF)
    netmiko - interacting with network devices through SSH using CLI scraping
    xmltodict - converting XML-formatted data to a Python dictionary

While you may need more than these down the line, these basic libraries will provide you with a solid foundation. 
Let's get to installing them!

kribz@Z06944:~$ python3 --version
Python 3.12.3
kribz@Z06944:~$ sudo apt install python3.12-venv

kribz@Z06944:~$ python3 -m venv devnet
kribz@Z06944:~$ ls
devnet  packages-microsoft-prod.deb
kribz@Z06944:~$ source devnet/bin/activate
(devnet) kribz@Z06944:~$

install a list of modulese
(devnet) kribz@Z06944:~$ python3 -m pip install netmiko requests ncclient xmltodict

controleer door
python3 -m pip list
(devnet) kribz@Z06944:~$  python3 -m pip list
Package            Version
------------------ ---------
bcrypt             4.2.1
certifi            2024.8.30
cffi               1.17.1
charset-normalizer 3.4.0
cryptography       44.0.0
future             1.0.0
idna               3.10
lxml               5.3.0
markdown-it-py     3.0.0
mdurl              0.1.2
ncclient           0.6.16
netmiko            4.5.0
ntc_templates      7.5.0
paramiko           3.5.0
pip                24.0
pycparser          2.22
Pygments           2.18.0
PyNaCl             1.5.0
pyserial           3.5
PyYAML             6.0.2
requests           2.32.3
rich               13.9.4
ruamel.yaml        0.18.6
ruamel.yaml.clib   0.2.12
scp                0.15.0
setuptools         75.6.0
six                1.17.0
textfsm            1.1.3
urllib3            2.2.3
xmltodict          0.14.2

rechter muis click in je python file en daar kan je run kiezen

en testen of import requests werkt door geeen fout melding te geven


Place the following steps in order based on the order we followed in the video.


=======================================================================================


DevNet Resources

One of the most important things to remember as a developer is not to reinvent the wheel! Put simply, 
if you're having an issue, there's about a 9.9999/10 chance that someone else has also run into the 
issue and found a solution that we can learn from!

That's where the "Net" in Cisco's DevNet comes into play! This is a network of developers, 
and it means we can all learn from each other and benefit from shared resources. 
Let's look at some of the online resources available through the DevNet platform.

cisco devnet
developer.cisco.com
4 resources
documentation labs samle-codes sandbox

catalyst center former dna center

 You are currently running Windows 11 on your main workstation. You want to set up an Ubuntu Linux environment alongside Windows, 
 such that you can develop your code entirely within the Linux environment using VS Code without installing any 
 development tools on your main Windows installation. Which of the following would be most appropriate to achieve this goal?

 Installing Ubuntu Desktop in a VM

 You are planning to work on multiple Python projects simultaneously in your Linux environment. 
 You'd like to ensure that the libraries   you install for one project do not impact other projects. 
 Which of the following should you configure?
 One Python virtual environment per project

You are planning to develop some scripts utilizing the IOS-XE APIs that you need to test against a real IOS-XE device. 
Your budget is limited. Additionally, your workstation does not have enough hardware resources to support virtualized devices. 
Which of the following should you do to test your script?

Use the IOS-XE/Cat8000V DevNet Sandbox


You are struggling with creating a script to automate Cisco's Catalyst SD-WAN solution and 
would like to examine others' code for inspiration. To which of the following resources should you turn?

Code Exchange



